import org.apache.tools.ant.filters.ReplaceTokens

architectury {
	platformSetupLoomIde()
	fabric()
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version[1]}"
	modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_data[0]}"
	modApi "com.terraformersmc:modmenu:${rootProject.mod_menu_data[0]}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
	relocate "javax.servlet", "mtr.libraries.javax.servlet"
	relocate "org.eclipse", "mtr.libraries.org.eclipse"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier null
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

task moveFabricBuilds() {
	doLast {
		delete fileTree("../build/release").matching {
			include "**/${rootProject.variation_header}-fabric*"
		}
		delete fileTree("../build/libs").matching {
			include "**/${rootProject.variation_header}-fabric*"
		}
		delete fileTree("../build/latest").matching {
			include "**/${rootProject.variation_header}-fabric*"
		}
		copy {
			from "build/libs"
			include "*${rootProject.mod_version}.jar"
			into "../build/release"
			rename "(.+)", "${rootProject.variation_header}-\$1"
		}
		if (rootProject.variation == "normal") {
			copy {
				from "build/libs"
				into "../build/latest"
				rename { fileName -> "MTR-${fileName.replace(rootProject.mod_version, "latest")}" }
			}
			copy {
				from "build/libs"
				include "*${rootProject.mod_version}-dev-shadow.jar"
				into "../build/libs"
				rename "(.+)", "MTR-\$1"
			}
		}
	}
}

task testServer {
	doLast {
		if (rootProject.variation == "normal") {
			copy {
				from "../resources/eula.txt"
				into "server"
			}
			copy {
				from "../resources/server.properties"
				into "server"
				filter(ReplaceTokens, tokens: ["port": String.valueOf(25000 + new Random().nextInt(500))])
			}
			copy {
				from "../build/latest"
				into "server/mods"
				include "MTR-fabric-*-latest.jar"
				rename "(.+)", "MTR.jar"
			}
			download {
				src rootProject.fabric_api_data[1]
				dest "fabric/server/mods/fabric-api.jar"
				overwrite true
				retries - 1
			}
			download {
				src "https://meta.fabricmc.net/v2/versions/loader/${rootProject.fabric_loader_version[0]}/${rootProject.fabric_loader_version[1]}/0.11.1/server/jar"
				dest "fabric/server/fabric-server.jar"
				overwrite true
				retries - 1
			}
			javaexec {
				mainClass = "-jar"
				args = ["fabric-server.jar", "nogui"]
				jvmArgs = ["-Xms4G", "-Xmx4G"]
				workingDir = "server"
			}
		}
	}
}

afterEvaluate {
	for (def task in it.tasks) {
		if (task == tasks.build) {
			task.finalizedBy tasks.moveFabricBuilds
		}
	}
}
